{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joey\\\\class\\\\bootcamp\\\\assignment\\\\shootem-up-showdown\\\\Post-React\\\\shootem-up-showdown\\\\src\\\\components\\\\Cell.js\";\nimport React from 'react';\nimport { Hexagon, Text } from 'react-hexgrid';\nimport { Player1, Player2 } from './Player'; // Import the Player component\nimport { gridArray } from './Grid';\nimport { PlayerSpawn1, PlayerSpawn2 } from './PlayerSpawn';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet handleClick = (q, r, i) => {\n  const findIndexByCoordinates = (q, r) => {\n    return gridArray.findIndex(coord => coord[0] === q && coord[1] === r);\n  };\n  if (i !== -1) {\n    const adjacentTiles = [];\n\n    //Top\n    if (findIndexByCoordinates(q, r - 1) >= 0) {\n      adjacentTiles.push(findIndexByCoordinates(q, r - 1));\n    }\n    //Top Right\n    if (findIndexByCoordinates(q + 1, r - 1) >= 0) {\n      adjacentTiles.push(findIndexByCoordinates(q + 1, r - 1));\n    }\n    //Bottom Right\n    if (findIndexByCoordinates(q + 1, r) >= 0) {\n      adjacentTiles.push(findIndexByCoordinates(q + 1, r));\n    }\n    //Bottom\n    if (findIndexByCoordinates(q, r + 1) >= 0) {\n      adjacentTiles.push(findIndexByCoordinates(q, r + 1));\n    }\n    //Bottom Left\n    if (findIndexByCoordinates(q - 1, r + 1) >= 0) {\n      adjacentTiles.push(findIndexByCoordinates(q - 1, r + 1));\n    }\n    //Top Left\n    if (findIndexByCoordinates(q - 1, r) >= 0) {\n      adjacentTiles.push(findIndexByCoordinates(q - 1, r));\n    }\n\n    //These should never be negative so they'll always be pushed. JUST KIDDING. Need the if statement because if you click the bottom tiles, they get out of map and therefore the i becomes negative apparently.\n    // adjacentTiles.push(findIndexByCoordinates(q + 1, r));\n    // adjacentTiles.push(findIndexByCoordinates(q, r + 1));\n\n    console.log(\"Clicked Tile Index:\", i);\n    console.log(\"Adjacent Tile Indexes:\", adjacentTiles);\n  }\n\n  // Your click event logic goes here\n  // alert(i);\n  // console.log(i);\n};\n\nconst randomPlace1 = PlayerSpawn1();\nconst randomPlace2 = PlayerSpawn2();\nconst Cell = ({\n  q,\n  r,\n  i\n}) => {\n  // const isPlayerCell = q === 5 && r === -1; // Change these coordinates as needed\n\n  return /*#__PURE__*/_jsxDEV(Hexagon, {\n    onClick: () => handleClick(q, r, i),\n    q: q,\n    r: r,\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      children: [i, \" \", q, \" \", r]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 14\n    }, this), randomPlace1.i === i ? /*#__PURE__*/_jsxDEV(Player, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 37\n    }, this) : null, randomPlace2.i === i ? /*#__PURE__*/_jsxDEV(Player, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 37\n    }, this) : null]\n  }, i, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_c = Cell;\nexport default Cell;\nvar _c;\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"names":["React","Hexagon","Text","Player1","Player2","gridArray","PlayerSpawn1","PlayerSpawn2","jsxDEV","_jsxDEV","handleClick","q","r","i","findIndexByCoordinates","findIndex","coord","adjacentTiles","push","console","log","randomPlace1","randomPlace2","Cell","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","Player","_c","$RefreshReg$"],"sources":["C:/Users/Joey/class/bootcamp/assignment/shootem-up-showdown/Post-React/shootem-up-showdown/src/components/Cell.js"],"sourcesContent":["import React from 'react';\nimport { Hexagon, Text } from 'react-hexgrid'\nimport {Player1, Player2} from './Player' // Import the Player component\nimport { gridArray } from './Grid';\nimport{PlayerSpawn1, PlayerSpawn2} from './PlayerSpawn'\n\n\nlet handleClick = (q, r, i) => {\n\n    const findIndexByCoordinates = (q, r) => {\n        return gridArray.findIndex(coord => coord[0] === q && coord[1] === r);\n    };\n\n\n    if (i !== -1) {\n        const adjacentTiles = [];\n\n        //Top\n        if(findIndexByCoordinates(q, r - 1) >= 0){\n            adjacentTiles.push(findIndexByCoordinates(q, r - 1));\n        }\n        //Top Right\n        if(findIndexByCoordinates(q + 1, r - 1) >= 0){\n            adjacentTiles.push(findIndexByCoordinates(q + 1, r - 1));\n        }\n        //Bottom Right\n        if(findIndexByCoordinates(q + 1, r) >= 0){\n            adjacentTiles.push(findIndexByCoordinates(q + 1, r));\n        }\n         //Bottom\n         if(findIndexByCoordinates(q, r + 1) >= 0){\n            adjacentTiles.push(findIndexByCoordinates(q, r + 1));\n        }\n         //Bottom Left\n         if(findIndexByCoordinates(q - 1, r + 1) >= 0){\n            adjacentTiles.push(findIndexByCoordinates(q - 1, r + 1));\n        }\n         //Top Left\n         if(findIndexByCoordinates(q - 1, r) >= 0){\n            adjacentTiles.push(findIndexByCoordinates(q - 1, r));\n        }\n\n        //These should never be negative so they'll always be pushed. JUST KIDDING. Need the if statement because if you click the bottom tiles, they get out of map and therefore the i becomes negative apparently.\n        // adjacentTiles.push(findIndexByCoordinates(q + 1, r));\n        // adjacentTiles.push(findIndexByCoordinates(q, r + 1));\n        \n        \n\n        console.log(\"Clicked Tile Index:\", i);\n        console.log(\"Adjacent Tile Indexes:\", adjacentTiles);\n    }\n\n    // Your click event logic goes here\n    // alert(i);\n    // console.log(i);\n}\n\n\n\n\nconst randomPlace1 = PlayerSpawn1();\nconst randomPlace2 = PlayerSpawn2();\n\n\nconst Cell = ({ q, r, i}) => {\n\n    // const isPlayerCell = q === 5 && r === -1; // Change these coordinates as needed\n\n\n    return (\n        <Hexagon onClick={()=>handleClick(q, r, i)} key={i} q={q} r={r}>\n            \n            \n            {<Text>\n                {i} {q} {r}\n            </Text>}\n            {/* {isPlayerCell ? <Player /> : null} */}\n            {randomPlace1.i === i ? <Player /> : null}\n            {randomPlace2.i === i ? <Player /> : null}\n        </Hexagon>\n    )\n}\nexport default Cell"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}