{"ast":null,"code":"import { Hex } from \"./models/Hex\";\nimport { Point } from \"./models/Point\";\nexport class HexUtils {\n  /** Checks if coordinates are the same.*/\n  static equals(a, b) {\n    return a.q == b.q && a.r == b.r && a.s == b.s;\n  }\n  /** Returns a new Hex with the addition of q,r,s values from A and B respectively */\n  static add(a, b) {\n    return new Hex(a.q + b.q, a.r + b.r, a.s + b.s);\n  }\n  /** Returns a new Hex with the subtraction of q,r,s values from A and B respectively */\n  static subtract(a, b) {\n    return new Hex(a.q - b.q, a.r - b.r, a.s - b.s);\n  }\n  /** Returns a new Hex with the multiplication of q,r,s values by k */\n  static multiply(a, k) {\n    return new Hex(a.q * k, a.r * k, a.s * k);\n  }\n  /** Returns length from origin point 0,0 */\n  static lengths(hex) {\n    return (Math.abs(hex.q) + Math.abs(hex.r) + Math.abs(hex.s)) / 2;\n  }\n  /** Returns the distance between two hex coordinates */\n  static distance(a, b) {\n    return HexUtils.lengths(HexUtils.subtract(a, b));\n  }\n  /** Returns a new Hex in the \"direction\", which has modulus six, \"% 6\", applied to it,\n   * and thus computes to a number between 0 through 5. */\n  static direction(direction) {\n    return HexUtils.DIRECTIONS[(6 + direction % 6) % 6];\n  }\n  /** Returns the addition of the current Hex and a new Hex in the\n   * specified \"direction\". Direction has modulus six, \"% 6\", applied to it,\n   * and thus computes to a number between 0 through 5.\n   */\n  static neighbor(hex, direction) {\n    return HexUtils.add(hex, HexUtils.direction(direction));\n  }\n  /** Returns an array of all the direct neighbors of a Hex within one Hex away */\n  static neighbors(hex) {\n    const array = [];\n    for (let i = 0; i < HexUtils.DIRECTIONS.length; i += 1) {\n      array.push(HexUtils.neighbor(hex, i));\n    }\n    return array;\n  }\n  /** I'm not sure what this does */\n  static round(hex) {\n    let rq = Math.round(hex.q);\n    let rr = Math.round(hex.r);\n    let rs = Math.round(hex.s);\n    const qDiff = Math.abs(rq - hex.q);\n    const rDiff = Math.abs(rr - hex.r);\n    const sDiff = Math.abs(rs - hex.s);\n    if (qDiff > rDiff && qDiff > sDiff) rq = -rr - rs;else if (rDiff > sDiff) rr = -rq - rs;else rs = -rq - rr;\n    return new Hex(rq, rr, rs);\n  }\n  /** Given the q,r,s of a hexagon return the x and y pixel coordinates of the\n   * hexagon center. */\n  static hexToPixel(hex, layout) {\n    const s = layout.spacing;\n    const M = layout.orientation;\n    let x = (M.f0 * hex.q + M.f1 * hex.r) * layout.size.x;\n    let y = (M.f2 * hex.q + M.f3 * hex.r) * layout.size.y;\n    // Apply spacing\n    x = x * s;\n    y = y * s;\n    return new Point(x + layout.origin.x, y + layout.origin.y);\n  }\n  /** Return the q,r,s coordinate of the hexagon given pixel point x and y. */\n  static pixelToHex(point, layout) {\n    const M = layout.orientation;\n    const pt = new Point((point.x - layout.origin.x) / layout.size.x, (point.y - layout.origin.y) / layout.size.y);\n    const q = M.b0 * pt.x + M.b1 * pt.y;\n    const r = M.b2 * pt.x + M.b3 * pt.y;\n    const hex = new Hex(q, r, -q - r);\n    return HexUtils.round(hex);\n  }\n  /** Apply Linear Interpolation between two known points\n   * See:\n   * https://en.wikipedia.org/wiki/Linear_interpolation\n   */\n  static lerp(a, b, t) {\n    return a + (b - a) * t;\n  }\n  /** Apply Linear Interpolation between two known Hexes\n   * See:\n   * https://en.wikipedia.org/wiki/Linear_interpolation\n   */\n  static hexLerp(a, b, t) {\n    return new Hex(HexUtils.lerp(a.q, b.q, t), HexUtils.lerp(a.r, b.r, t), HexUtils.lerp(a.s, b.s, t));\n  }\n  /** Return a string ID from Hex Coordinates.\n   * Example: Hex Coordinates of {q: 1, r: 2, s: 3} is returned\n   * as string \"1,2,3\"\n   */\n  static getID(hex) {\n    return `${hex.q},${hex.r},${hex.s}`;\n  }\n}\nHexUtils.DIRECTIONS = [new Hex(1, 0, -1), new Hex(1, -1, 0), new Hex(0, -1, 1), new Hex(-1, 0, 1), new Hex(-1, 1, 0), new Hex(0, 1, -1)];\nexport default HexUtils;","map":{"version":3,"names":["Hex","Point","HexUtils","equals","a","b","q","r","s","add","subtract","multiply","k","lengths","hex","Math","abs","distance","direction","DIRECTIONS","neighbor","neighbors","array","i","length","push","round","rq","rr","rs","qDiff","rDiff","sDiff","hexToPixel","layout","spacing","M","orientation","x","f0","f1","size","y","f2","f3","origin","pixelToHex","point","pt","b0","b1","b2","b3","lerp","t","hexLerp","getID"],"sources":["../src/HexUtils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}